public abstract class BooleanIterator : R|kotlin/collections/Iterator<kotlin/Boolean>| {
    public final operator function next(): R|kotlin/Boolean|

    public abstract function nextBoolean(): R|kotlin/Boolean|

}

public abstract class ByteIterator : R|kotlin/collections/Iterator<kotlin/Byte>| {
    public final operator function next(): R|kotlin/Byte|

    public abstract function nextByte(): R|kotlin/Byte|

}

public abstract class CharIterator : R|kotlin/collections/Iterator<kotlin/Char>| {
    public final operator function next(): R|kotlin/Char|

    public abstract function nextChar(): R|kotlin/Char|

}

<E> public abstract interface Collection : R|kotlin/collections/Iterable<E>| {
    public abstract operator function contains(element: R|E|): R|kotlin/Boolean|

    public abstract function containsAll(elements: R|kotlin/collections/Collection<E>|): R|kotlin/Boolean|

    public abstract function isEmpty(): R|kotlin/Boolean|

    public abstract operator function iterator(): R|kotlin/collections/Iterator<E>|

}

public abstract class DoubleIterator : R|kotlin/collections/Iterator<kotlin/Double>| {
    public final operator function next(): R|kotlin/Double|

    public abstract function nextDouble(): R|kotlin/Double|

}

public abstract class FloatIterator : R|kotlin/collections/Iterator<kotlin/Float>| {
    public final operator function next(): R|kotlin/Float|

    public abstract function nextFloat(): R|kotlin/Float|

}

public abstract class IntIterator : R|kotlin/collections/Iterator<kotlin/Int>| {
    public final operator function next(): R|kotlin/Int|

    public abstract function nextInt(): R|kotlin/Int|

}

<T> public abstract interface Iterable : R|kotlin/Any| {
    public abstract operator function iterator(): R|kotlin/collections/Iterator<T>|

}

<T> public abstract interface Iterator : R|kotlin/Any| {
    public abstract operator function hasNext(): R|kotlin/Boolean|

    public abstract operator function next(): R|T|

}

<E> public abstract interface List : R|kotlin/collections/Collection<E>| {
    public abstract operator function contains(element: R|E|): R|kotlin/Boolean|

    public abstract function containsAll(elements: R|kotlin/collections/Collection<E>|): R|kotlin/Boolean|

    public abstract operator function get(index: R|kotlin/Int|): R|E|

    public abstract function indexOf(element: R|E|): R|kotlin/Int|

    public abstract function isEmpty(): R|kotlin/Boolean|

    public abstract operator function iterator(): R|kotlin/collections/Iterator<E>|

    public abstract function lastIndexOf(element: R|E|): R|kotlin/Int|

    public abstract function listIterator(): R|kotlin/collections/ListIterator<E>|

    public abstract function listIterator(index: R|kotlin/Int|): R|kotlin/collections/ListIterator<E>|

    public abstract function subList(fromIndex: R|kotlin/Int|, toIndex: R|kotlin/Int|): R|kotlin/collections/List<E>|

}

<T> public abstract interface ListIterator : R|kotlin/collections/Iterator<T>| {
    public abstract operator function hasNext(): R|kotlin/Boolean|

    public abstract function hasPrevious(): R|kotlin/Boolean|

    public abstract operator function next(): R|T|

    public abstract function nextIndex(): R|kotlin/Int|

    public abstract function previous(): R|T|

    public abstract function previousIndex(): R|kotlin/Int|

}

public abstract class LongIterator : R|kotlin/collections/Iterator<kotlin/Long>| {
    public final operator function next(): R|kotlin/Long|

    public abstract function nextLong(): R|kotlin/Long|

}

<K, V> public abstract interface Map : R|kotlin/Any| {
    public abstract function containsKey(key: R|K|): R|kotlin/Boolean|

    public abstract function containsValue(value: R|V|): R|kotlin/Boolean|

    public abstract operator function get(key: R|K|): R|V|

    public open function getOrDefault(key: R|K|, defaultValue: R|V|): R|V|

    public abstract function isEmpty(): R|kotlin/Boolean|

}

<E> public abstract interface MutableCollection : R|kotlin/collections/Collection<E>|, R|kotlin/collections/MutableIterable<E>| {
    public abstract function add(element: R|E|): R|kotlin/Boolean|

    public abstract function addAll(elements: R|kotlin/collections/Collection<E>|): R|kotlin/Boolean|

    public abstract function clear(): R|kotlin/Unit|

    public abstract operator function iterator(): R|kotlin/collections/MutableIterator<E>|

    public abstract function remove(element: R|E|): R|kotlin/Boolean|

    public abstract function removeAll(elements: R|kotlin/collections/Collection<E>|): R|kotlin/Boolean|

    public abstract function retainAll(elements: R|kotlin/collections/Collection<E>|): R|kotlin/Boolean|

}

<T> public abstract interface MutableIterable : R|kotlin/collections/Iterable<T>| {
    public abstract operator function iterator(): R|kotlin/collections/MutableIterator<T>|

}

<T> public abstract interface MutableIterator : R|kotlin/collections/Iterator<T>| {
    public abstract function remove(): R|kotlin/Unit|

}

<E> public abstract interface MutableList : R|kotlin/collections/List<E>|, R|kotlin/collections/MutableCollection<E>| {
    public abstract function add(element: R|E|): R|kotlin/Boolean|

    public abstract function add(index: R|kotlin/Int|, element: R|E|): R|kotlin/Unit|

    public abstract function addAll(index: R|kotlin/Int|, elements: R|kotlin/collections/Collection<E>|): R|kotlin/Boolean|

    public abstract function addAll(elements: R|kotlin/collections/Collection<E>|): R|kotlin/Boolean|

    public abstract function clear(): R|kotlin/Unit|

    public abstract function listIterator(): R|kotlin/collections/MutableListIterator<E>|

    public abstract function listIterator(index: R|kotlin/Int|): R|kotlin/collections/MutableListIterator<E>|

    public abstract function remove(element: R|E|): R|kotlin/Boolean|

    public abstract function removeAll(elements: R|kotlin/collections/Collection<E>|): R|kotlin/Boolean|

    public abstract function removeAt(index: R|kotlin/Int|): R|E|

    public abstract function retainAll(elements: R|kotlin/collections/Collection<E>|): R|kotlin/Boolean|

    public abstract operator function set(index: R|kotlin/Int|, element: R|E|): R|E|

    public abstract function subList(fromIndex: R|kotlin/Int|, toIndex: R|kotlin/Int|): R|kotlin/collections/MutableList<E>|

}

<T> public abstract interface MutableListIterator : R|kotlin/collections/ListIterator<T>|, R|kotlin/collections/MutableIterator<T>| {
    public abstract function add(element: R|T|): R|kotlin/Unit|

    public abstract operator function hasNext(): R|kotlin/Boolean|

    public abstract operator function next(): R|T|

    public abstract function remove(): R|kotlin/Unit|

    public abstract function set(element: R|T|): R|kotlin/Unit|

}

<K, V> public abstract interface MutableMap : R|kotlin/collections/Map<K, V>| {
    public abstract function clear(): R|kotlin/Unit|

    public abstract function put(key: R|K|, value: R|V|): R|V|

    public abstract function putAll(from: R|kotlin/collections/Map<out K, V>|): R|kotlin/Unit|

    public abstract function remove(key: R|K|): R|V|

    public open function remove(key: R|K|, value: R|V|): R|kotlin/Boolean|

}

<E> public abstract interface MutableSet : R|kotlin/collections/Set<E>|, R|kotlin/collections/MutableCollection<E>| {
    public abstract function add(element: R|E|): R|kotlin/Boolean|

    public abstract function addAll(elements: R|kotlin/collections/Collection<E>|): R|kotlin/Boolean|

    public abstract function clear(): R|kotlin/Unit|

    public abstract operator function iterator(): R|kotlin/collections/MutableIterator<E>|

    public abstract function remove(element: R|E|): R|kotlin/Boolean|

    public abstract function removeAll(elements: R|kotlin/collections/Collection<E>|): R|kotlin/Boolean|

    public abstract function retainAll(elements: R|kotlin/collections/Collection<E>|): R|kotlin/Boolean|

}

<E> public abstract interface Set : R|kotlin/collections/Collection<E>| {
    public abstract operator function contains(element: R|E|): R|kotlin/Boolean|

    public abstract function containsAll(elements: R|kotlin/collections/Collection<E>|): R|kotlin/Boolean|

    public abstract function isEmpty(): R|kotlin/Boolean|

    public abstract operator function iterator(): R|kotlin/collections/Iterator<E>|

}

public abstract class ShortIterator : R|kotlin/collections/Iterator<kotlin/Short>| {
    public final operator function next(): R|kotlin/Short|

    public abstract function nextShort(): R|kotlin/Short|

}

